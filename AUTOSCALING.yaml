AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc and subnets with autoscaling

# The following metadata is used to group the parameters
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation

# Parameters are used to to build flexible CloudFormation templates
Parameters:
  InstanceType:
    Type: String
    Description: Choosing  t2 micro because it is free
    Default: t2.micro
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: chat-app
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnetCIDR:
    Default: 10.0.0.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String

  PrivateSubnetCIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

  EnvironmentType: 
      Description: The environment type
      Type: String
      Default: dev
      AllowedValues: 
        - prod
        - dev
      ConstraintDescription: must be a prod or dev

  CPUPolicyTargetValue:
    Type: String
  ALBRequestCountTargetValue:
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: false
      EnableDnsSupport: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test-VPC
     
# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test-IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1a
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1A
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public-Route-Table
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

# Create Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-south-1b 
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-1B
      VpcId: !Ref VPC

  NatGateway:
      Type: "AWS::EC2::NatGateway"
      DependsOn: NatPublicIP
      Properties: 
        AllocationId: !GetAtt NatPublicIP.AllocationId
        SubnetId: !Ref PublicSubnet
     
  NatPublicIP:
      Type: "AWS::EC2::EIP"
      DependsOn: VPC
      Properties:
        Domain: VPC

# Create Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private-Route-Table
      VpcId: !Ref VPC

# Add a Private Route to the Route Table
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

# Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

# Create Security Group for the Application Load Balancer 
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/8000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: ALB-Security-Group
      VpcId: !Ref VPC

# Create Security Group for the Bastion Host aka Jump Box
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: SSH-Security-Group
      VpcId: !Ref VPC

# Create Security Group for FrontEnd Public
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/8000 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: FrontEnd-Security-Group
      VpcId: !Ref VPC

# Create Security Group for the BackEnd Private
  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: BackEnd-Security-Group
      VpcId: !Ref VPC

# Create FronEnd Public Static Instance
  clientInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
       ImageId: ami-0e017d2c21194a2db
       InstanceType: !Ref InstanceType
       KeyName: !Ref KeyName
       Tags:
         - Key: Name
           Value: FrontEnd-Public
       NetworkInterfaces:
       - DeviceIndex: 0
         AssociatePublicIpAddress: true
         SubnetId: !Ref PublicSubnet
         GroupSet: 
         - !Ref WebServerSecurityGroup

# Create BackEnd Private Static Instance    
  serverInstance:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: ami-0b11d810b76132e15
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        Tags:
          - Key: Name
            Value: BackEnd-Private
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          SubnetId: !Ref PrivateSubnet
          GroupSet: 
          - !Ref DataBaseSecurityGroup

#BackEnd AS-ELB-SGP Creation :
  BackEndELBSG:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: Enable HTTP access
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8000
            ToPort: 8000
            CidrIp: "0.0.0.0/0"
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: "0.0.0.0/0"
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: "0.0.0.0/0"
        Tags:
          - Key: Name
            Value: BackEnd-ELB-SG
   
  BackEndLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Scheme: internal
        SecurityGroups:
          - !Ref BackEndELBSG
        Subnets:
          - !Ref PublicSubnet
          - !Ref PrivateSubnet
        Tags:
          - Key: Name
            Value: BackEnd-ELB
        Type: application

  BackEndLoadBalancerListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref BackEndTargetGroup
            Type: forward
        LoadBalancerArn: !Ref BackEndLoadBalancer
        Port: 8000
        Protocol: HTTP
  BackEndTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        Name: BackEndTargetGroup
        Port: 8000
        Protocol: HTTP
        VpcId: !Ref VPC
  BackEndLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: ami-0b11d810b76132e15
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
          - !Ref DataBaseSecurityGroup 
  BackEndASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        MaxSize: '2'
        MinSize: '1'
        VPCZoneIdentifier:
          - !Ref PublicSubnet
          - !Ref PrivateSubnet
        DesiredCapacity: 2
        LaunchConfigurationName: !Ref BackEndLaunchConfig
        TargetGroupARNs:
          - !Ref BackEndTargetGroup
        MaxSize: 3
        MinSize: 1
        Tags:
          - Key: Name
            Value: BackEnd-AS
            PropagateAtLaunch: True
  BackEndCPUPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref BackEndASG
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: 70

# FrontEnd ASG Creation :
  FrontEndELBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: FrontEnd-LB-SG

# Front End Load Balancer
  FrontEndLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontEndELBSG
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: FrontEnd-ELB
      Type: application

  FrontEndLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontEndTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontEndLoadBalancer
      Port: 80
      Protocol: HTTP
  FrontEndTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: FrontEndTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  FrontEndLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0e017d2c21194a2db
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData:
       Fn::Base64:
        !Sub
          #!bin/bash
          sed 's/proxy_pass http:///proxy_pass http:///g' /etc/nginx/conf.d/chatapp.conf
      SecurityGroups:
        - !Ref WebServerSecurityGroup 
       
  FrontEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '2'
      MinSize: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref FrontEndLaunchConfig
      TargetGroupARNs:
        - !Ref FrontEndTargetGroup
      MaxSize: 3
      MinSize: 1
      Tags:
        - Key: Name
          Value: FrontEnd-AS
          PropagateAtLaunch: True
  FrontEndCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontEndASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70

# OutPut
Outputs:
# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet
  PublicSubnet:
    Description: Public Subnet ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet
    Value: !Ref PublicSubnet

# Export Private Subnet
  PrivateSubnet:
    Description: Private Subnet ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet
    Value: !Ref PrivateSubnet

# Export ALB Security Group ID
  ALBSecurityGroup:
    Description: Application Load Balancer Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

# Export SSH Security Group ID
  SSHSecurityGroup:
    Description: SSH Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

# Export WebServer Security Group ID
  WebServerSecurityGroup:
    Description: Webserver Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

# Export DataBase Security Group ID
  DataBaseSecurityGroup:
    Description: DataBase Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
    Value: !Ref DataBaseSecurityGroup


# Export Public Load Balancer Dns Name
  PublicLoadBalancerDnsName:
    Description: Public Load Balancer DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerDnsName
    Value: !GetAtt FrontEndLoadBalancer.DNSName

# Export Private Load Balancer Dns Name
  PrivateLoadBalancerDnsName:
    Description: Private Load Balancer DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-PrivateLoadBalancerDnsName
    Value: !GetAtt BackEndLoadBalancer.DNSName